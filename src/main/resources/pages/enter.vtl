<body>
<!-- Div that contains input box for username and button to enter-->
<div id="user-info">
    <div class="username-info">
        <h3>Enter your username to continue.</h3>
    </div>
    <input id="username-box" placeholder="Username"/>
    <button id="username-button" class="button-format">Enter</button>
    <div class="avatar-info">
        <h3>Select an avatar.</h3>
    </div>
    <div id="avatar-select" class="icon-select"></div>
</div>


<script>

var iconSelect;

window.onload = function() {
     iconSelect = new IconSelect("avatar-select",
            {'selectedIconWidth':48,
                'selectedIconHeight':48,
                'selectedBoxPadding':3,
                'iconsWidth':48,
                'iconsHeight':48,
                'boxIconSpace':3,
                'vectoralIconNumber':4,
                'horizontalIconNumber':4});
    var icons = [];
    for (var i = 0; i < 16; i++) {
        icons.push({'iconFilePath':'img/avatar/' + i + '.png','iconValue':i});
    }
    iconSelect.refresh(icons);
};

// variable to make sure websocket is open before sending messages
var waiting = true;

// Websocket variable to send messages through to java
var webSocket = new WebSocket("ws://" + location.hostname + ":" + location.port + "/chat");


// function triggering on the websocket opening (when a stable connection is made)
webSocket.onopen = function () {
    // Authenticating for socket id (auth token)
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("POST", "http://127.0.0.1:4567/authenticate/", false); // false for synchronous request
    xmlHttp.send(null);
    var authContent = xmlHttp.responseText;

    // json varialbe to send authentication variable to java (so it can associate a session with socket id)
    var auth = {
        "contentType": "authenticate",
        "contents": authContent
    };

    webSocket.send(JSON.stringify(auth));

    // set variable to false to indicate that the websocket is open and ready to use
    waiting = false;
};

webSocket.onmessage = function (message) {
    if (waiting) return;
    // json variable received from websocket
    var data = JSON.parse(message.data);
    // if the content-contentType is not a response to a username being valid, return.
    if (data.contentType != "username-response") {
        return;
    }
    // If the contents are true (yes the username is valid / available)
    // proceed to next page and play success animation using sweetalert
    if (data.contents == "true") {
        swal({
            title: "Success!",
            text: "Sending you through...",
            icon: "success",
            button: "Processing..."
        });
        // Allow 500 ms for animation to play
        setTimeout(function() {
            // close socket
            window.onbeforeunload();
            // switch pages
            window.location.href = "http://127.0.0.1:4567/index";
        }, 500);
    }
    // If the contents are false, (username is invalid / unavailable), play error animation and return.
    else if (data.contents == "false") {
        swal({
            title: "Error!",
            text: "That username is either unavailable or currently in use!",
            icon: "error",
            button: "Ok"
        });
    }
};

// Search for keypress while inside username-box input
id("username-box").addEventListener("keypress", function (e) {
    // If key is enter
    if (e.keyCode === 13) {
        if (waiting) return;
        // check if box is empty, if so, error: invalid username and return
        if (id("username-box").value.trim() === "") {
            swal({
                title: "Error!",
                text: "Invalid username!",
                icon: "error",
                button: "Ok"
            });
            return;
        }
        // otherwise, send username through websocket and await response
        var username = {
            "contentType": "put-username",
            "contents": id("username-box").value.trim() + "$" + iconSelect.getSelectedValue()
        };

        webSocket.send(JSON.stringify(username));
    }
});

// Search for clicks of button labelled Enter
id("username-button").addEventListener("click", function () {
    if (waiting) return;
    // check if input box is empty, if so, error: invalid username and return
    if (id("username-box").value.trim() === "") {
        swal({
            title: "Error!",
            text: "Invalid username!",
            icon: "error",
            button: "Ok"
        });
        return;
    }
    // otherwise, send username through websocket and await response
    var username = {
        "contentType": "put-username",
        "contents": id("username-box").value.trim() + "$" + iconSelect.getSelectedValue()
    };

    webSocket.send(JSON.stringify(username));
});

// function to close websocket
window.onbeforeunload = function() {
    webSocket.onclose = function () {}; // disable onclose handler first
    webSocket.close()
};

// helper function to get element of page by id
function id(id) {
    return document.getElementById(id);
}
</script>
</body>