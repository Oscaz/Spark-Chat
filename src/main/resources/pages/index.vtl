<!DOCTYPE html>
    <head> </head>
    <body>
    <!-- Div containing controls for joining / creating a room (Private checkbox, Input box, button to trigger -->
    <div id="roomControls">
        <input id="checkbox" type="checkbox"/> Private?
        <input id="channel_name" type="text" placeholder="Create a room"/>
        <button id="join_general" class="button-format">Create / join chatroom</button>
    </div>
    <!-- List containing buttons for open chatrooms that contain the name and number online  -->
    <ul>
        <div id="chatroominfo">
            <li>Open Chatrooms:</li>
        </div>
        <div id="chatrooms">
            <!-- Chat rooms inserted here: -->
        </div>
    </ul>

<script>
//Establish the WebSocket connection and set up event handlers

// variable to make sure websocket is open before sending messages
var waiting = true;

// Websocket variable to send messages through to java
var webSocket = new WebSocket("ws://" + location.hostname + ":" + location.port + "/chat");

// function triggering on the websocket opening (when a stable connection is made)
webSocket.onopen = function () {
    // Authenticating for socket id (auth token)
    var xmlHttp = new XMLHttpRequest();
    xmlHttp.open("POST", "http://127.0.0.1:4567/authenticate/", false ); // false for synchronous request
    xmlHttp.send( null );
    var authContent = xmlHttp.responseText;

    // Receiving list of open chatrooms (with names / people online)
    var xmlRooms = new XMLHttpRequest();
    xmlRooms.open("POST", "http://127.0.0.1:4567/chatrooms/", false );
    xmlRooms.send( null );
    var chatContent = xmlRooms.responseText;

    // Splitting chatrooms
    var chatrooms = chatContent.split("/");

    // Sending authentication token through to java
    var auth = {
        "type": "authenticate",
        "contents": authContent
    };

    webSocket.send(JSON.stringify(auth));

    // For each chatroom, create button pertaining to it with name & number online,
    // run function button(channelName) when pressed.
    if (chatrooms.length !== 0) {
        for (var i = 0; i < chatrooms.length; i++) {
            if (chatrooms[i] === "") { continue; }
            var number = chatrooms[i].split(":")[1];
            var name = chatrooms[i].split(":")[0];
            var button = '<li><button id="join_' + name + '" class="button-format" onclick="button(\'' + name + '\'' +
                    ')">Join ' + name + ' </button> ' + number +' online</li>';
            insert("chatrooms", button);
        }
    }

    waiting = false;
};

function button(channelName) {
    if (waiting) {
        console.log("Waiting...");
        return;
    }

    var switchChannel = {
        "type": "switch-channel",
        "contents": channelName + "$" + document.getElementById("checkbox").checked
    };

    webSocket.send(JSON.stringify(switchChannel));

    swal({
        title: "Success!",
        text: "Sending you through...",
        icon: "success",
        button: "Processing..."
    });
    setTimeout(function() {
        window.onbeforeunload();
        window.location.href = "http://127.0.0.1:4567/chatroom";
    }, 500);
}


window.onbeforeunload = function() {
    webSocket.onclose = function () {}; // disable onclose handler first
    webSocket.close()
};

document.getElementById("channel_name").addEventListener("keypress", function (e) {
    if (e.keyCode === 13) {
        if (waiting) {
            console.log("Waiting...");
            return;
        }
        if (id("channel_name").value.trim() === "") {
            return;
        }
        if (id("channel_name").value.includes("$")) {
            swal({
                title: "Error!",
                text: "Invalid channel-name! (Cannot contain $)",
                icon: "error",
                button: "Ok"
            });
        }

        var switchChannel = {
            "type": "switch-channel",
            "contents": document.getElementById("channel_name").value + "$" + document.getElementById("checkbox").checked
        };

        webSocket.send(JSON.stringify(switchChannel));

        swal({
            title: "Success!",
            text: "Sending you through...",
            icon: "success",
            button: "Processing..."
        });
        setTimeout(function() {
            window.onbeforeunload();
            window.location.href = "http://127.0.0.1:4567/chatroom";
        }, 500);
    }
});


document.getElementById("join_general").addEventListener("click", function () {
    if (waiting) {
        console.log("Waiting...");
        return;
    }

    if (id("channel_name").value.trim() === "") {
        return;
    }

    if (id("channel_name").value.includes("$")) {
        swal({
            title: "Error!",
            text: "Invalid channel-name! (Cannot contain $)",
            icon: "error",
            button: "Ok"
        });
    }

    var switchChannel = {
        "type": "switch-channel",
        "contents": document.getElementById("channel_name").value + "$" + document.getElementById("checkbox").checked
    };

    webSocket.send(JSON.stringify(switchChannel));

    swal({
        title: "Success!",
        text: "Sending you through...",
        icon: "success",
        button: "Processing..."
    });
    setTimeout(function() {
        window.onbeforeunload();
        window.location.href = "http://127.0.0.1:4567/chatroom";
    }, 500);
});

function insert(targetId, message) {
    id(targetId).insertAdjacentHTML("afterbegin", message);
}

function id(id) {
    return document.getElementById(id);
}

</script>
</body>
</html>